<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Base64从入门到入门</title>
    <url>/2023/03/24/Base64%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h2 id="位、字节、字"><a href="#位、字节、字" class="headerlink" title="位、字节、字"></a>位、字节、字</h2><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>位（bits，比特）、字节（Bytes）、字（words）是计算机数据存储的单位。位是最小的存储单位，每一个位存储一个1位的二进制码，一个字节由8位组成。而字通常为16、32或64个位组成。</p>
<ul>
<li><p>位：二进制码 0或者1</p>
</li>
<li><p>字节：字节是由八个位组成的一个单元，也就是8个bit组成1个Byte</p>
</li>
<li><p>字符：字（Word）代表计算机处理指令或数据的二进制数位数，是计算机进行数据存储和数据处理的运算的单位。比如中文汉字、英文字母、阿拉伯数字等等。它是一个运算单位，但不是基础单位，计算机中最基本的单位还是位。</p>
</li>
</ul>
<blockquote>
<p>对于32位计算机与64位计算机，字的大小往往不同。<br>32位计算机：1字&#x3D;32位&#x3D;4字节，64位计算机：1字&#x3D;64位&#x3D;8字节。</p>
</blockquote>
<h5 id="扩展："><a href="#扩展：" class="headerlink" title="扩展："></a>扩展：</h5><p>这里的32位与64位又是什么意思呢？它指的是计算机芯片一次处理的指令长度。</p>
<p>计算机组成原理可以得知冯诺依曼计算机结构：</p>
<p>①有运算器、控制器、存储器、输入、输出五大部分组成。</p>
<p>②指令和数据用二进制表示，两者形式上没有差别。</p>
<p>③指令和数据存放在存储器中，按地址访问。</p>
<p>④指令由操作码和地址码组成，操作码指定操作性质，地址码指定操作数地址。</p>
<p>⑤采用“存储程序控制”方式进行工作。</p>
<p>所以，这里的32位与64位指的就是CPU运算器一次处理的指令长度为32位或者64位二进制码</p>
<p>那么在第1步的时候又会出现一些疑问，比如从各种不同的字符怎么得到它的二进制呢？</p>
<p>这里就要说到字符集、字符编码方式</p>
<h2 id="字符集、字符编码"><a href="#字符集、字符编码" class="headerlink" title="字符集、字符编码"></a>字符集、字符编码</h2><h4 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h4><p>什么是字符集，就是字符的集合。那为什么要有字符集，为了使用计算机。</p>
<p>我们知道最最最开始的计算机是通过纸带打孔作为计算机的输入，但后来我们要用键盘打字啦，可是你计算机处理的是0101010101这样的二进制码，我键盘敲出来的是abcd这样的字母，这怎么办呢，所以为了能够使用计算机，就要有一套字符集。</p>
<p>比如最开始的ASCII字符集，中文叫美国信息交换标准代码，英文叫American Standard Code for Information Interchange，缩写就是ASCII。</p>
<p>它是怎么表示的呢，它使用一个字节也就是8位二进制数来表示一个字符，其中前七位表示具体，最高位第八位固定0，那从00000000 - 01111111对应十进制也就是0 - 127一共包含了128个字符，编码从0到127，包含了所有的大写和小写字母，数字0 到9、标点符号，以及在美式英语中使用的特殊控制字符。这样，二进制跟我们实际使用的字符就对应起来了。</p>
<p>其中：<br>0～31及127(共33个)是控制字符或通信专用字符（其余为可显示字符），如控制符：LF(换行)、CR(回车)、FF(换页)、DEL(删除)、BS(退格)等等，通信专用字符：SOH（文头）、EOT（文尾）、ACK（确认）等</p>
<p>32-47是标点符号 </p>
<p>48-57是阿拉伯数字0-9</p>
<p>58-64是标点符号 </p>
<p>65-90是大写字符A-Z</p>
<p>91-96是标点符号</p>
<p>97-122是小写字母a-z</p>
<p>123-126是标点符号</p>
<p>（具体可参考ASCII表）</p>
<p>在英语体系中，这些字符就已经够用了，但是对于欧洲来说，还不够，欧洲语言体系众多法语希伯来语什么αβ还有字母上面带音标的é，所以他们又在ASCII基础上，把最高位那个0给利用起来了，这样从00000000 - 11111111 对应十进制也就是 0 - 255，一共256个字符。</p>
<p>但是对应亚洲比如中文，这256个字符又不够了，中文汉字那么多，常见的汉字就有三千左右，完整的更是有上万，还分简体繁体。所以原中国国家标准总局1981年5月1日发布实施了一个GB2312字符集，然后后来又经过几版更新迭代，比如GBK GB18030-2000 GB18030-2005。但这只解决了中文语言环境使用计算机的问题，当跨语言跨平台的时候，不同字符集之间又会出现“语言不通”的问题。</p>
<p>于是，Unicode出现了。Unicode又称万国码，中文叫通用多八位编码字符集，英文叫Universal Multiple-Octet Coded Character Set。是由一个名为 Unicode 学术学会(Unicode Consortium)的机构制订的字符编码系统，支持现今世界各种不同语言的书面文本的交换、处理及显示。该编码于1990年开始研发，1992年公布1.0.1，最新版本是2020年3月Unicode 13.0.0。</p>
<p>它为每种语言中的每个字符设定了统一并且唯一的二进制编码，以满足跨语言、跨平台进行文本转换、处理的要求。</p>
<p>Unicode 标准始终使用十六进制数字，从0到10ffff(十六进制)范围内共1114112个码位的代码空间，而且在书写时在前面加上前缀“U+”，例如字母“A”的编码为 0x0041 和字符“€”的编码为 0x20AC，所以“A”、“€”的编码书写为“U+0041”、“U+20AC”。</p>
<blockquote>
<p>0x代表十六进制数字</p>
<p>u+和\u代表unicode统一码</p>
<p>\x代表utf-8编码</p>
</blockquote>
<h4 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h4><p>字符集只是规定了有哪些字符，而字符编码才是真正使用字符集的过程，就好比看一些近代历史背景的电视剧时，比如抗战、内战时期，传电报都是加密后的信息，收到电报要对照特定的密码本来破译信息。就相当于这里的字符集和字符编码的概念。</p>
<p>在 Unicode 出现之前，所有的字符集都是和具体编码方案绑定在一起的（即字符集≈编码方式），意思就是ASCII字符集也对应了一套固定的ASCII编码，比如查看ASCII码表，A就是65就是0100 0001。</p>
<p>但是Unicode之后，出现了不同的编码方式也就是不同的UTF。UTF是 Unicode Tranformation Format，也就是Unicode 的编码，包含UTF-8 UTF-16 UTF-32，没错就是我们现在最常见的utf-8。</p>
<p>说完了 位 字节 字</p>
<p>说完了 字符集 字符编码</p>
<p>要说回到Base64上了</p>
<h2 id="Base64"><a href="#Base64" class="headerlink" title="Base64"></a>Base64</h2><p>Base64就是一种基于64个可打印字符来表示二进制数据的方法。</p>
<p>Base64编码是从二进制到字符的过程。</p>
<p>可用于在HTTP环境下传递较长的标识信息。采用Base64编码具有不可读性，需要解码后才能阅读。</p>
<p>为什么是64，而不是Base32 Base128？</p>
<p>这个64是怎么来的，第一是根据转换规则中，取6位二进制为一组，2^6&#x3D;64，第二，当初制定标准的时候，标准的Base64协议规定了一个索引表，选用了 A-Z、a-z、0-9、+、&#x2F;这 64个可打印字符，所以称之为Base64。</p>
<p>那我们平常还可能在Base64的编码结果中看到&#x3D;号是为什么呢？</p>
<p>这个&#x3D;没有意义，是为了进行填充字符而出现。</p>
<p>上面说到，Base64编码是从二进制到字符的过程</p>
<h5 id="具体转换步骤："><a href="#具体转换步骤：" class="headerlink" title="具体转换步骤："></a>具体转换步骤：</h5><p>第1步，先要拿到待转换字符串的字节码，也就是用二进制01格式表示的数据</p>
<p>第2步，将待转换的字符串每三个字节分为一组，每个字节占8bit，那么共有24个二进制位。</p>
<p>第3步，将上面的24个二进制位每6个一组，共分为4组。</p>
<p>第4步，在每组前面添加两个0，每组由6个变为8个二进制位，总共32个二进制位，即四个字节。</p>
<p>第5步，根据Base64编码对照表（见下图）获得对应的值。</p>
<p>0      A      17      R  　34      i  　51　z<br>1      B      18      S  　35      j  　52　0<br>2      C      19      T  　36      k  　53　1<br>3      D      20      U  　37      l  　54　2<br>4      E       21      V  　38      m    55　3<br>5      F       22     W      39      n     56　4<br>6      G      23      X  　40      o  　57　5<br>7      H      24      Y  　41      p  　58　6<br>8      I        25      Z  　42      q  　59　7<br>9      J        26      a  　43      r  　 60　8<br>10   K        27      b  　44      s  　61　9<br>11   L        28      c  　45      t  　 62　+<br>12   M      29      d  　46      u  　63　 &#x2F;<br>13   N       30      e  　47      v<br>14   O       31      f  　48      w  　<br>15   P       32      g  　49      x<br>16   Q       33      h  　50      y</p>
<p>用一个例子，对照这上面所说的步骤，来看下到底Base64怎么转的</p>
<p>比如我们要把<strong>hello</strong>这个单词转成Base64</p>
<p><strong>第一步</strong>：拿到字节码</p>
<p>对照ASCII码表</p>
<p><strong>h</strong>  104   0110 1000</p>
<p><strong>e</strong>  101   0110 0101</p>
<p><strong>l</strong>   108   0110 1100</p>
<p><strong>l</strong>   108   0110 1100</p>
<p><strong>o</strong>  111   0110 1111</p>
<p><strong>第二步</strong>，字符串每三个字节分为一组，理想状态下每组一共24位，不足24位的先不管</p>
<p>第一组  0110 1000    0110 0101    0110 1100</p>
<p>第二组  0110 1100    0110 1111 </p>
<p><strong>第三步</strong>，将24位，每6位一组，分为4组</p>
<p>第一组    011010      000110      010101      101100</p>
<p>第二组    011011      000110      1111 </p>
<p>但是这里只有两个字节16位，不够分成4组了怎么办？</p>
<p>这时常见的&#x3D;号就要出现了</p>
<p>首先，对不足6位的组进行补足0，然后对完全没有的用&#x3D;号填充</p>
<p>所以第二组应该是  011011      000110      111100      &#x3D;</p>
<p><strong>第四步</strong>，在每小组前面补足0到8位</p>
<p>第一组    00011010      00000110      00010101      00101100</p>
<p>第二组    00011011      00000110      00111100      &#x3D;</p>
<p><strong>第五步</strong>，根据8位二进制对照ASCII转成码值</p>
<p>第一组    26      6      21      44</p>
<p>第二组    27      6      60      &#x3D;</p>
<p><strong>第六步</strong>，根据Base64编码对照索引表</p>
<p>第一组    a      G      V      s</p>
<p>第二组    b      G      8      &#x3D;</p>
<p>最终得到 hello 的Base64编码结果  <strong>aGVsbG8&#x3D;</strong></p>
<p>找一个在线转码工具比对一下     <a href="https://c.runoob.com/front-end/693/">https://c.runoob.com/front-end/693/</a></p>
<p>结果一致</p>
<p>到这里，我们就明白Base64是什么了。</p>
<p>拓展：为什么jpg格式图片Base64完都是&#x2F;9j开头，<a href="https://www.ngui.cc/el/775244.html?action=onClick">https://www.ngui.cc/el/775244.html?action=onClick</a></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Base64</tag>
        <tag>计算机基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac mini M2(macOS Ventura 13.3.1)安装Maven</title>
    <url>/2023/04/18/Mac-mini-M2-macOS-Ventura-13-3-1-%E5%AE%89%E8%A3%85Maven/</url>
    <content><![CDATA[<h3 id="1-查看是否已安装了maven"><a href="#1-查看是否已安装了maven" class="headerlink" title="1.查看是否已安装了maven"></a>1.查看是否已安装了maven</h3><p>打开终端，执行命令 mvn -v<br>显示zsh: command not found: mvn<br>说明还未安装</p>
<h3 id="2-安装maven"><a href="#2-安装maven" class="headerlink" title="2.安装maven"></a>2.安装maven</h3><h4 id="2-1-下载maven"><a href="#2-1-下载maven" class="headerlink" title="2.1.下载maven"></a>2.1.下载maven</h4><p>官网地址<a href="https://maven.apache.org/download.cgi">https://maven.apache.org/download.cgi</a><br>历史版本归档地址<a href="https://archive.apache.org/dist/maven/maven-3/">https://archive.apache.org/dist/maven/maven-3/</a></p>
<p>下载3.6.0版本tar.gz文件</p>
<h4 id="2-2-解压"><a href="#2-2-解压" class="headerlink" title="2.2.解压"></a>2.2.解压</h4><p>打开下载目录，双击apache-maven-3.6.0-bin.tar.gz文件，解压出来apache-maven-3.6.0目录，将它移动到你想放到位置</p>
<h4 id="2-3-配置环境变量"><a href="#2-3-配置环境变量" class="headerlink" title="2.3.配置环境变量"></a>2.3.配置环境变量</h4><p>由于我新电脑没有.bash_profile文件，所以在终端中执行以下命令来创建和编辑.bash_profile文件</p>
<blockquote>
<p>touch ~&#x2F;.bash_profile<br>open -e ~&#x2F;.bash_profile</p>
</blockquote>
<p>在弹出的编辑窗口中粘贴以下内容：</p>
<blockquote>
<p>export MAVEN_HOME&#x3D;&#x2F;Users&#x2F;liwenfei&#x2F;Workspace&#x2F;apache&#x2F;apache-maven-3.6.0<br>export PATH&#x3D;$PATH:$MAVEN_HOME&#x2F;bin</p>
</blockquote>
<p>保存并退出</p>
<p>在终端中执行source ~&#x2F;.bash_profile命令来使环境变量生效</p>
<p>再次验证：mvn -v<br>弹出两次“无法打开libjansi.jnilib”，均点取消（解决方案见参考列表）<br>然后终端打印出maven版本信息</p>
<blockquote>
<p>Apache Maven 3.6.0 (97c98ec64a1fdfee7767ce5ffb20918da4f719f3; 2018-10-25T02:41:47+08:00)<br>Maven home: &#x2F;Users&#x2F;liwenfei&#x2F;Workspace&#x2F;apache&#x2F;apache-maven-3.6.0<br>Java version: 1.8.0_361, vendor: Oracle Corporation, runtime: &#x2F;Library&#x2F;Internet Plug-Ins&#x2F;JavaAppletPlugin.plugin&#x2F;Contents&#x2F;Home<br>Default locale: zh_CN, platform encoding: UTF-8<br>OS name: “mac os x”, version: “13.3.1”, arch: “x86_64”, family: “mac”</p>
</blockquote>
<h4 id="2-4-配置永久生效"><a href="#2-4-配置永久生效" class="headerlink" title="2.4.配置永久生效"></a>2.4.配置永久生效</h4><p>当按以上方法设置完成后，当时可以，但是重新打开终端应用或者电脑重启后，这个环境变量就失效了<br>zsh: command not found: mvn</p>
<p>在终端中执行以下命令来创建和编辑.zshrc文件<br>touch ~&#x2F;.zshrc<br>open -e ~&#x2F;.zshrc<br>在弹出的编辑窗口中写入source ~&#x2F;.bash_profile并保存<br>然后再在终端中执行source ~&#x2F;.zshrc命令来使环境变量生效<br>再次验证：mvn -v<br>成功打印出maven版本信息<br>重新打开终端再次验证<br>也成功打印出maven版本信息<br>ok</p>
<h4 id="2-5-修改配置文件"><a href="#2-5-修改配置文件" class="headerlink" title="2.5.修改配置文件"></a>2.5.修改配置文件</h4><p>进入maven配置文件目录</p>
<blockquote>
<p>cd &#x2F;Users&#x2F;liwenfei&#x2F;Workspace&#x2F;apache&#x2F;apache-maven-3.6.0&#x2F;conf</p>
</blockquote>
<p>备份配置文件</p>
<blockquote>
<p>cp settings.xml settings.xml.default</p>
</blockquote>
<p>修改配置文件</p>
<blockquote>
<p>vim settings</p>
</blockquote>
<p>a)修改repository目录</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>/Users/liwenfei/Workspace/apache/apache-maven-repository<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>b)修改远程仓库镜像mirror为阿里云maven镜像</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus aliyun maven repo.<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>保存并退出，即可正常使用Maven了</p>
<p>参考：<br>Maven安装 <a href="https://www.cnblogs.com/benjieqiang/p/17261978.html">https://www.cnblogs.com/benjieqiang/p/17261978.html</a><br>Maven报错“无法打开libjansi.jnilib” <a href="https://www.cnblogs.com/shenxiaolin/p/15081246.html">https://www.cnblogs.com/shenxiaolin/p/15081246.html</a></p>
]]></content>
      <categories>
        <category>macOS</category>
      </categories>
      <tags>
        <tag>Mac</tag>
        <tag>Mac mini</tag>
        <tag>Apple Silicon</tag>
        <tag>M2</tag>
        <tag>macOS</tag>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac mini M2(macOS Ventura 13.3.1)安装Node.js</title>
    <url>/2023/04/18/Mac-mini-M2-macOS-Ventura-13-3-1-%E5%AE%89%E8%A3%85Node-js/</url>
    <content><![CDATA[<h3 id="1-查看是否已安装Node-js"><a href="#1-查看是否已安装Node-js" class="headerlink" title="1.查看是否已安装Node.js"></a>1.查看是否已安装Node.js</h3><p>where node<br>node -v<br>两个命令分别返回<br>node not found<br>zsh: command not found: node<br>应该是没有安装过node的，而且我这新电脑</p>
<h3 id="2-关于node-js和nvm"><a href="#2-关于node-js和nvm" class="headerlink" title="2.关于node.js和nvm"></a>2.关于node.js和nvm</h3><p>node.js<br>nvm是node的版本管理工具，它可以便捷的下载更新管理node的版本，所以安装这个就好了，使用它来下载安装node</p>
<h3 id="3-安装nvm"><a href="#3-安装nvm" class="headerlink" title="3.安装nvm"></a>3.安装nvm</h3><p>nvm官方Github页面 <a href="https://github.com/nvm-sh/nvm">https://github.com/nvm-sh/nvm</a><br>根据Readme里面的操作说明，使用下面的命令来安装nvm<br>curl -o- <a href="https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh">https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh</a> | bash</p>
<p>但是终端打印错误<br>curl: (7) Failed to connect to raw.githubusercontent.com port 443 after 32 ms: Couldn’t connect to server<br>又不行<br>意思是网络连不上服务器</p>
<p>通过修改hosts的方法解决这个问题<br>在<a href="https://site.ip138.com/raw.Githubusercontent.com/%E6%9F%A5%E8%AF%A2ip">https://site.ip138.com/raw.Githubusercontent.com/查询ip</a><br>然后在终端执行sudo vim &#x2F;etc&#x2F;hosts命令编辑hosts文件<br>在末尾添加上<br>185.199.108.133 raw.githubusercontent.com<br>185.199.109.133 raw.githubusercontent.com<br>185.199.110.133 raw.githubusercontent.com<br>185.199.111.133 raw.githubusercontent.com<br>182.43.124.6 raw.githubusercontent.com<br>20.205.243.166 github.com<br>保存退出</p>
<p>重新执行安装命令</p>
<p>这次倒是下载成功了，但是紧接着又来了一个git clone的错误<br>&#x3D;&gt; Cloning into ‘&#x2F;Users&#x2F;liwenfei&#x2F;.nvm’…<br>fatal: unable to access ‘<a href="https://github.com/nvm-sh/nvm.git/">https://github.com/nvm-sh/nvm.git/</a>‘: HTTP&#x2F;2 stream 1 was not closed cleanly before end of the underlying stream<br>Failed to clone nvm repo. Please report this!</p>
<p>网络不好，重试一次，依然报错<br>&#x3D;&gt; Cloning into ‘&#x2F;Users&#x2F;liwenfei&#x2F;.nvm’…<br>fatal: unable to access ‘<a href="https://github.com/nvm-sh/nvm.git/">https://github.com/nvm-sh/nvm.git/</a>‘: Recv failure: Operation timed out<br>Failed to clone nvm repo. Please report this!</p>
<p>网络不好，继续重试</p>
<p>……</p>
<p>终于试成功了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">liwenfei@macli Documents % curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash</span><br><span class="line">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">100 15916  100 15916    0     0    206      0  0:01:17  0:01:17 --:--:--  4483</span><br><span class="line">=&gt; Downloading nvm from git to <span class="string">&#x27;/Users/liwenfei/.nvm&#x27;</span></span><br><span class="line">=&gt; Cloning into <span class="string">&#x27;/Users/liwenfei/.nvm&#x27;</span>...</span><br><span class="line">remote: Enumerating objects: 359, <span class="keyword">done</span>.</span><br><span class="line">remote: Counting objects: 100% (359/359), <span class="keyword">done</span>.</span><br><span class="line">remote: Compressing objects: 100% (305/305), <span class="keyword">done</span>.</span><br><span class="line">remote: Total 359 (delta 40), reused 169 (delta 28), pack-reused 0</span><br><span class="line">Receiving objects: 100% (359/359), 219.46 KiB | 881.00 KiB/s, <span class="keyword">done</span>.</span><br><span class="line">Resolving deltas: 100% (40/40), <span class="keyword">done</span>.</span><br><span class="line">remote: Enumerating objects: 54, <span class="keyword">done</span>.</span><br><span class="line">remote: Counting objects: 100% (54/54), <span class="keyword">done</span>.</span><br><span class="line">remote: Compressing objects: 100% (28/28), <span class="keyword">done</span>.</span><br><span class="line">remote: Total 28 (delta 26), reused 2 (delta 0), pack-reused 0</span><br><span class="line">Unpacking objects: 100% (28/28), 4.38 KiB | 204.00 KiB/s, <span class="keyword">done</span>.</span><br><span class="line">From https://github.com/nvm-sh/nvm</span><br><span class="line"></span><br><span class="line"> * tag               v0.39.3    -&gt; FETCH_HEAD</span><br><span class="line">* (HEAD detached at FETCH_HEAD)</span><br><span class="line">  master</span><br><span class="line">  =&gt; Compressing and cleaning up git repository</span><br><span class="line"></span><br><span class="line">=&gt; Appending nvm <span class="built_in">source</span> string to /Users/liwenfei/.zshrc</span><br><span class="line">=&gt; Appending bash_completion <span class="built_in">source</span> string to /Users/liwenfei/.zshrc</span><br><span class="line">=&gt; Close and reopen your terminal to start using nvm or run the following to use it now:</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> NVM_DIR=<span class="string">&quot;<span class="variable">$HOME</span>/.nvm&quot;</span></span><br><span class="line">[ -s <span class="string">&quot;<span class="variable">$NVM_DIR</span>/nvm.sh&quot;</span> ] &amp;&amp; \. <span class="string">&quot;<span class="variable">$NVM_DIR</span>/nvm.sh&quot;</span>  <span class="comment"># This loads nvm</span></span><br><span class="line">[ -s <span class="string">&quot;<span class="variable">$NVM_DIR</span>/bash_completion&quot;</span> ] &amp;&amp; \. <span class="string">&quot;<span class="variable">$NVM_DIR</span>/bash_completion&quot;</span>  <span class="comment"># This loads nvm bash_completion</span></span><br></pre></td></tr></table></figure>




<p>验证安装</p>
<p>要验证nvm是否已安装，请执行以下操作：</p>
<blockquote>
<p>command -v nvm</p>
</blockquote>
<p>如果安装成功，它应该输出nvm。请注意，which nvm不起作用，因为nvm是一个源shell函数，而不是可执行的二进制文件。<br>注意：在Linux上，在运行安装脚本后，如果您在键入command -v nvm后获得nvm: command not found或没有看到来自终端的反馈，只需关闭当前终端，打开新终端，然后再次尝试验证。</p>
<p>如上面所说，在刚安装成功时，在终端执行command -v nvm命令，没有任何反应<br>退出终端重新打开终端再次执行command -v nvm命令，成功打印出nvm<br>说明已经安装成功</p>
<p>4.使用nvm安装node.js<br>nvm ls-remote 命令查看所有可安装的node版本<br>nvm install node 命令进行安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">liwenfei@macli ~ % nvm install node</span><br><span class="line">Downloading and installing node v19.9.0...</span><br><span class="line">Downloading https://nodejs.org/dist/v19.9.0/node-v19.9.0-darwin-arm64.tar.xz...</span><br><span class="line"><span class="comment">######################################################################################################################################### 100.0%</span></span><br><span class="line">Computing checksum with shasum -a 256</span><br><span class="line">Checksums matched!</span><br><span class="line">Now using node v19.9.0 (npm v9.6.3)</span><br><span class="line">Creating default <span class="built_in">alias</span>: default -&gt; node (-&gt; v19.9.0)</span><br><span class="line">liwenfei@macli ~ % </span><br><span class="line">liwenfei@macli ~ % node -v</span><br><span class="line">v19.9.0</span><br></pre></td></tr></table></figure>

<p>或者使用nvm install 16.20.0这样指定版本号的命令，来安装指定版本</p>
<p>然后node -v成功输出node版本信息<br>安装完成！</p>
<p>5.使用nvm切换node.js的版本<br>nvm ls命令来查看本地已安装的node版本<br>nvm ls-remote命令来查看远程所有node版本</p>
<p>然后使用nvm install xx.xx.xx来安装指定版本的node<br>在macOS上，安装完成后并不会立即生效，系统使用的依然是之前的版本</p>
<p>使用nvm alias default xx.xx.xx 来切换系统使用的node版本</p>
<p>然后再次查看版本node -v</p>
<p>成功！</p>
]]></content>
      <categories>
        <category>macOS</category>
      </categories>
      <tags>
        <tag>Mac</tag>
        <tag>Mac mini</tag>
        <tag>Apple Silicon</tag>
        <tag>M2</tag>
        <tag>macOS</tag>
        <tag>Node</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac mini M2(macOS Ventura 13.3.1)安装jdk8</title>
    <url>/2023/04/18/Mac-mini-M2-macOS-Ventura-13-3-1-%E5%AE%89%E8%A3%85jdk8/</url>
    <content><![CDATA[<p>这个安装非常简单，简单到我怀疑是不是有问题！</p>
<p>1.官网下载jdk-8u361-macosx-x64.dmg<br>2.在下载目录双击打开dmg,弹出的文件夹里面有个pkg<br>3.双击打开pkg文件，按照指示点击继续或者下一步，即可完成安装</p>
<p>ps<br>1.第一步打开dmg的时候，可能会提醒需要安装rosetta，安装即可<br>2.安装完打开终端执行java -version即可查看到版本号，竟然无需配置环境变量？为什么？<br>echo $JAVA_HOME命令打印为空！！！</p>
<p>where java命令打印结果为&#x2F;usr&#x2F;bin&#x2F;java<br>ls -al &#x2F;usr&#x2F;bin | grep java命令打印结果<br>-rwxr-xr-x   52 root   wheel    168384  4  2 00:46 java<br>-rwxr-xr-x   52 root   wheel    168384  4  2 00:46 javac<br>-rwxr-xr-x   52 root   wheel    168384  4  2 00:46 javadoc<br>-rwxr-xr-x   52 root   wheel    168384  4  2 00:46 javah<br>-rwxr-xr-x   52 root   wheel    168384  4  2 00:46 javap<br>-rwxr-xr-x   52 root   wheel    168384  4  2 00:46 javapackager<br>-rwxr-xr-x   52 root   wheel    168384  4  2 00:46 javaws</p>
<p>所以jdk安装目录在哪里？那些bin lib jar什么的去哪了？<br>在这里：&#x2F;Library&#x2F;Java&#x2F;JavaVirtualMachines&#x2F;jdk1.8.0_361.jdk&#x2F;Contents&#x2F;Home</p>
]]></content>
      <categories>
        <category>macOS</category>
      </categories>
      <tags>
        <tag>Mac</tag>
        <tag>Mac mini</tag>
        <tag>Apple Silicon</tag>
        <tag>M2</tag>
        <tag>macOS</tag>
        <tag>Java</tag>
        <tag>Jdk</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot多环境配置文件</title>
    <url>/2023/04/28/Spring-Boot%E5%A4%9A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<p>1.在resource目录下新建profiles目录</p>
<p>2.在profiles目录下新建wfli  macli  test  prod四个目录，分别存放四个环境下的配置文件</p>
<p>3.在pom.xml文件添加profiles节点配置</p>
<blockquote>
<p>如果是多module项目，在需要打包的那个项目的pom里写而不是在父pom写，如果是单体项目，就直接在pom里写</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>macli<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">package.environment</span>&gt;</span>macli<span class="tag">&lt;/<span class="name">package.environment</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>wfli<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">package.environment</span>&gt;</span>wfli<span class="tag">&lt;/<span class="name">package.environment</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>test<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">package.environment</span>&gt;</span>test<span class="tag">&lt;/<span class="name">package.environment</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>prod<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">package.environment</span>&gt;</span>prod<span class="tag">&lt;/<span class="name">package.environment</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这一步添加完成后，在Jetbrains IDEA窗口右侧边上的Maven插件里，就可以看到profiles里面已经多出了几个环境的选项了，并且activation激活的环境上打了勾</p>
<p>4.在pom.xml文件添加build节点配置</p>
<blockquote>
<p>如果是多module项目，在需要打包的那个项目的pom里写而不是在父pom写，如果是单体项目，就直接在pom里写</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;basedir&#125;/src/main/resources/profiles/$&#123;package.environment&#125;<span class="tag">&lt;/<span class="name">directory</span>&gt;</span><span class="comment">&lt;!--动态配置当前生效配置文件的目录--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span><span class="comment">&lt;!--这个是过滤什么的呢？--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span><span class="comment">&lt;!--其实这个resource注释掉也没啥影响，不知道为什么写，也不知道为什么不写--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;basedir&#125;/src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">excludes</span>&gt;</span><span class="comment">&lt;!--配置打包时不要将源文件放到包内--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>profiles/macli<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>profiles/wfli<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>profiles/test<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>profiles/prod<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;basedir&#125;/src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.**<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--maven打包插件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;version&gt;2.18.1&lt;/version&gt;--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">skipTests</span>&gt;</span>true<span class="tag">&lt;/<span class="name">skipTests</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>5.在每个application.properties中添加</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.profiles.active</span>=<span class="string">@package.environment@</span></span><br></pre></td></tr></table></figure>

<p>6.启动成功</p>
<blockquote>
<p>启动时，可以通过maven插件上的profiles属性来选择生效的环境配置</p>
</blockquote>
<p>7.打包成功</p>
<blockquote>
<p>打包时，可以通过maven插件上的profiles属性来选择生效的环境配置</p>
<p>通过maven命令打包时，可以通过-P参数来指定生效的环境配置</p>
</blockquote>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Maven</tag>
        <tag>Java</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Hexo搭建个人博客</title>
    <url>/2018/02/12/%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h2 id="Hexo简介"><a href="#Hexo简介" class="headerlink" title="Hexo简介"></a>Hexo简介</h2><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>
<h2 id="Hexo博客建站步骤"><a href="#Hexo博客建站步骤" class="headerlink" title="Hexo博客建站步骤"></a>Hexo博客建站步骤</h2><p>1.安装Git</p>
<p>2.安装Node.js</p>
<p>3.安装Hexo</p>
<p>4.Hexo建站</p>
<p>5.GitHub创建个人仓库</p>
<p>6.Hexo博客文件部署到GitHub</p>
<p>7.设置域名</p>
<p>8.跨设备更新发布博客</p>
<h3 id="1-安装Git"><a href="#1-安装Git" class="headerlink" title="1.安装Git"></a>1.安装Git</h3><p>Git是目前世界上最先进的分布式版本控制系统</p>
<ul>
<li>Windows：下载并安装 <a href="https://git-scm.com/download/win">git</a>.</li>
<li>Mac：使用 <a href="http://mxcl.github.com/homebrew/">Homebrew</a>, <a href="http://www.macports.org/">MacPorts</a> 或者下载 <a href="http://sourceforge.net/projects/git-osx-installer/">安装程序</a>。</li>
<li>Linux (Ubuntu, Debian)：<code>sudo apt-get install git-core</code></li>
<li>Linux (Fedora, Red Hat, CentOS)：<code>sudo yum install git-core</code></li>
</ul>
<blockquote>
<p><strong>Windows用户</strong></p>
<p>可以前往 <a href="https://npm.taobao.org/mirrors/git-for-windows/">淘宝 Git for Windows 镜像</a> 下载 git 安装包</p>
</blockquote>
<blockquote>
<p><strong>Mac用户</strong></p>
<p>如果在编译时可能会遇到问题，请先到 App Store 安装 Xcode，Xcode 完成后，启动并进入 <strong>Preferences -&gt; Download -&gt; Command Line Tools -&gt; Install</strong> 安装命令行工具。</p>
</blockquote>
<h3 id="2-安装Node-js"><a href="#2-安装Node-js" class="headerlink" title="2.安装Node.js"></a>2.安装Node.js</h3><p>Node.js 为大多数平台提供了官方的 <a href="https://nodejs.org/zh-cn/download/">安装程序</a>。对于中国大陆地区用户，可以前往 <a href="https://npm.taobao.org/mirrors/node">淘宝 Node.js 镜像</a> 下载。</p>
<p>其它的安装方法：</p>
<ul>
<li>Windows：通过 <a href="https://github.com/jasongin/nvs/">nvs</a>（推荐）或者 <a href="https://github.com/nvm-sh/nvm">nvm</a> 安装。</li>
<li>Mac：使用 <a href="https://brew.sh/">Homebrew</a> 或 <a href="http://www.macports.org/">MacPorts</a> 安装。</li>
<li>Linux（DEB&#x2F;RPM-based）：从 <a href="https://github.com/nodesource/distributions">NodeSource</a> 安装。</li>
<li>其它：使用相应的软件包管理器进行安装，可以参考由 Node.js 提供的 <a href="https://nodejs.org/zh-cn/download/package-manager/">指导</a>。</li>
</ul>
<p>对于 Mac 和 Linux 同样建议使用 nvs 或者 nvm，以避免可能会出现的权限问题。</p>
<blockquote>
<p><strong>Windows 用户</strong></p>
<p>使用 Node.js 官方安装程序时，请确保勾选 <strong>Add to PATH</strong> 选项（默认已勾选）</p>
</blockquote>
<blockquote>
<p><strong>Mac &#x2F; Linux 用户</strong></p>
<p>如果在尝试安装 Hexo 的过程中出现 <code>EACCES</code> 权限错误，请遵循 <a href="https://docs.npmjs.com/resolving-eacces-permissions-errors-when-installing-packages-globally">由 npmjs 发布的指导</a> 修复该问题。强烈建议 <strong>不要</strong> 使用 root、sudo 等方法覆盖权限</p>
</blockquote>
<blockquote>
<p><strong>Linux</strong></p>
<p>如果您使用 Snap 来安装 Node.js，在 <a href="https://hexo.io/zh-cn/docs/commands#init">初始化</a> 博客时您可能需要手动在目标文件夹中执行 <code>npm install</code>。</p>
</blockquote>
<h3 id="3-安装Hexo"><a href="#3-安装Hexo" class="headerlink" title="3.安装Hexo"></a>3.安装Hexo</h3><p>Git与Node.js安装完成后，即可使用npm安装Hexo</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看hexo版本</span></span><br><span class="line">$ hexo -v</span><br></pre></td></tr></table></figure>



<h3 id="4-Hexo建站"><a href="#4-Hexo建站" class="headerlink" title="4.Hexo建站"></a>4.Hexo建站</h3><p>Hexo安装完成后，即可开始建站。</p>
<p>选定一个目录如&#x2F;Hexoblog，打开命令行工具进入到该目录，执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo init Hexoblog</span><br><span class="line">$ <span class="built_in">cd</span> Hexoblog</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure>

<p>新建完成后，Hexoblog文件夹的目录如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure>

<p>新建完成后，可在本地运行测试服务，在浏览器输入<a href="http://localhost:4000就可以看到生成的博客：">http://localhost:4000就可以看到生成的博客：</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止服务</span></span><br><span class="line">ctrl + c</span><br></pre></td></tr></table></figure>



<h3 id="5-GitHub创建个人仓库"><a href="#5-GitHub创建个人仓库" class="headerlink" title="5.GitHub创建个人仓库"></a>5.GitHub创建个人仓库</h3><p>在<a href="https://github.com/">GitHub</a>上创建一个新的仓库，仓库名为：用户名.github.io，比如我的用户名为heart14，那么新建的仓库名就应该时heart14.github.io。</p>
<h3 id="6-Hexo博客文件部署到GitHub"><a href="#6-Hexo博客文件部署到GitHub" class="headerlink" title="6.Hexo博客文件部署到GitHub"></a>6.Hexo博客文件部署到GitHub</h3><p>完成了本地博客网站的创建，也完成了GitHub个人仓库的创建，下一步就可以把网站部署到GitHub上，来进行网络访问了。</p>
<blockquote>
<p>注：此步之前，应该已经完成本地git到GitHub的ssh key配置，保证可以从本地仓库到远程仓库之间的同步操作。</p>
</blockquote>
<p>打开Hexo站点配置文件<code>_config.yml</code>，在文件内容的最下方找到<code>deploy:</code>，修改下方的配置内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: https://github.com/用户名/用户名.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<p>然后需要安装<a href="https://github.com/hexojs/hexo-deployer-git">hexo-deployer-git</a>插件，才可以用命令一键把站点内容部署到GitHub</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>插件安装完成后，就可以进行部署操作了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo generate</span><br><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<ul>
<li><p>hexo clean 清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。</p>
<p>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p>
</li>
<li><p>hexo generate 生成静态文件。</p>
</li>
<li><p>hexo deploy 部署网站。</p>
</li>
</ul>
<p>以上三步命令也可简化为两步：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo d -g</span><br></pre></td></tr></table></figure>

<p>更多命令可参考<a href="https://hexo.io/zh-cn/docs/commands">Hexo官方文档</a></p>
<p>以上，即完成Hexo搭建博客网站并部署到GitHub上，通过GitHub page服务来实现站点发布。</p>
<p>通过访问：https:&#x2F;&#x2F;用户名.github.io 来看看博客效果吧。</p>
<h3 id="7-设置域名"><a href="#7-设置域名" class="headerlink" title="7.设置域名"></a>7.设置域名</h3><p>待更新</p>
<h3 id="8-跨设备编辑发布博客"><a href="#8-跨设备编辑发布博客" class="headerlink" title="8.跨设备编辑发布博客"></a>8.跨设备编辑发布博客</h3><p>先占坑。</p>
<p>主要步骤：</p>
<p>1.在GitHub上yourname.github.io仓库上新建一个分支，分支名字可以随便起，比如我的叫做source，作用是用来上传博客源文件，而master分支不动，是用来上传hexo生成的静态博客文件的。</p>
<p>2.在yourname.github.io仓库上设置source分支为默认分支</p>
<p>3.将本地博客源文件上传到source分支，对于我来说也就是上面步骤中的&#x2F;Hexoblog目录</p>
<p>4.在其它设备上要进行编辑发布博客:</p>
<p>  a)先安装git, node, npm, hexo以及hexo-deployer-git插件</p>
<p>  b)选定一处目录，将GitHub上yourname.github.io仓库克隆下来，由于设置了source分支为默认分支，所以克隆下来的默认分支就是source</p>
<p>  c)在本地仓库进行编辑文章等操作</p>
<p>  d)需要发布的时候，和之前一样，执行hexo clean &amp;&amp; hexo g -d命令即可</p>
<p>  e)发布完成后，要将本地仓库上传到远程GitHub上，以便与下次如果换地方再进行发布的时候，远程仓库的博客源文件始终是最新的内容</p>
<h2 id="Hexo博客发布步骤"><a href="#Hexo博客发布步骤" class="headerlink" title="Hexo博客发布步骤"></a>Hexo博客发布步骤</h2><p>博客搭建完成了，那我想发布一篇文章该如何操作呢？</p>
<h3 id="1-创建文章"><a href="#1-创建文章" class="headerlink" title="1.创建文章"></a>1.创建文章</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new post 文章名</span><br></pre></td></tr></table></figure>

<p>创建后的文件位于source&#x2F;_post&#x2F;目录下</p>
<h3 id="2-编写文章"><a href="#2-编写文章" class="headerlink" title="2.编写文章"></a>2.编写文章</h3><p>文章内容自由发挥了，注意文章头部front-matter的使用，可以设定文章发表时间、分类、标签等信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 使用Hexo搭建个人博客</span><br><span class="line">tags: [Hexo, Blog, 博客]</span><br><span class="line">categories: </span><br><span class="line">- 建站</span><br><span class="line">date: 2020-02-12 13:32:23</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>更多Front-matter参数可查看<a href="https://hexo.io/zh-cn/docs/front-matter">Hexo文档</a></p>
<h3 id="3-发布部署"><a href="#3-发布部署" class="headerlink" title="3.发布部署"></a>3.发布部署</h3><p>文章编写完成后，即可进行发布了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo d -g</span><br></pre></td></tr></table></figure>

<p>打开你的博客站点看看吧~</p>
]]></content>
      <categories>
        <category>建站</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Blog</tag>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac mini M2(macOS Ventura 13.3.1)安装Homebrew</title>
    <url>/2023/04/18/Mac-mini-M2-macOS-Ventura-13-3-1-%E5%AE%89%E8%A3%85Homebrew/</url>
    <content><![CDATA[<h3 id="1-查看是否已安装了homebrew"><a href="#1-查看是否已安装了homebrew" class="headerlink" title="1.查看是否已安装了homebrew"></a>1.查看是否已安装了homebrew</h3><p>打开终端，执行命令 brew -v<br>显示zsh: command not found: brew<br>说明还未安装</p>
<h3 id="2-安装homebrew"><a href="#2-安装homebrew" class="headerlink" title="2.安装homebrew"></a>2.安装homebrew</h3><p>homebrew的Github主页 <a href="https://github.com/Homebrew/brew">https://github.com/Homebrew/brew</a><br>homebrew的官方主页 <a href="https://brew.sh/index_zh-cn">https://brew.sh/index_zh-cn</a></p>
<p>按照homebrew官方主页中给的命令进行安装：<br>在终端中执行命令 &#x2F;bin&#x2F;bash -c “$(curl -fsSL <a href="https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh">https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh</a>)”<br>但是打印了错误：<br>curl: (7) Failed to connect to raw.githubusercontent.com port 443 after 210 ms: Couldn’t connect to server<br>意思是连接不上raw.githubusercontent.com服务器</p>
<p>改用科大源安装Homebrew<br>首先在命令行运行如下几条命令设置环境变量：<br>export HOMEBREW_BREW_GIT_REMOTE&#x3D;”<a href="https://mirrors.ustc.edu.cn/brew.git">https://mirrors.ustc.edu.cn/brew.git</a>“<br>export HOMEBREW_CORE_GIT_REMOTE&#x3D;”<a href="https://mirrors.ustc.edu.cn/homebrew-core.git">https://mirrors.ustc.edu.cn/homebrew-core.git</a>“<br>export HOMEBREW_BOTTLE_DOMAIN&#x3D;”<a href="https://mirrors.ustc.edu.cn/homebrew-bottles">https://mirrors.ustc.edu.cn/homebrew-bottles</a>“<br>export HOMEBREW_API_DOMAIN&#x3D;”<a href="https://mirrors.ustc.edu.cn/homebrew-bottles/api">https://mirrors.ustc.edu.cn/homebrew-bottles/api</a>“<br>注意 export命令是一次性设置环境变量</p>
<p>之后在命令行运行 Homebrew 安装脚本：<br>&#x2F;bin&#x2F;bash -c “$(curl -fsSL <a href="https://github.com/Homebrew/install/raw/HEAD/install.sh">https://github.com/Homebrew/install/raw/HEAD/install.sh</a>)”<br>但是又失败了<br>打印错误：<br>curl: (56) Recv failure: Operation timed out<br>操作超时，应该还是github的问题，国内网不太好连</p>
<p>然后看到科大源镜像使用帮助上写到：<br>初次安装 Homebrew &#x2F; Linuxbrew 时，如果无法下载安装脚本， 可以使用我们每日同步的安装脚本文件。<br>&#x2F;bin&#x2F;bash -c “$(curl -fsSL <a href="https://mirrors.ustc.edu.cn/misc/brew-install.sh">https://mirrors.ustc.edu.cn/misc/brew-install.sh</a>)”</p>
<p>在终端中执行这个命令<br>很快有了反应，让输入密码<br>输入开机密码，回车继续<br>然后又出现一行Press RETURN&#x2F;ENTER to continue or any other key to abort<br>我们继续ENTER<br>然后终端会继续打印下载过程，等待…<br>安装顺利完成！</p>
<p>3.环境变量配置</p>
<p>安装完成时终端上打印了以下内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">......</span><br><span class="line">Warning: /opt/homebrew/bin is not <span class="keyword">in</span> your PATH.</span><br><span class="line">  Instructions on how to configure your shell <span class="keyword">for</span> Homebrew</span><br><span class="line">  can be found <span class="keyword">in</span> the <span class="string">&#x27;Next steps&#x27;</span> section below.</span><br><span class="line">==&gt; Installation successful!</span><br><span class="line"></span><br><span class="line">==&gt; Homebrew has enabled anonymous aggregate formulae and cask analytics.</span><br><span class="line">Read the analytics documentation (and how to opt-out) here:</span><br><span class="line">  https://docs.brew.sh/Analytics</span><br><span class="line">No analytics data has been sent yet (nor will any be during this install run).</span><br><span class="line"></span><br><span class="line">==&gt; Homebrew is run entirely by unpaid volunteers. Please consider donating:</span><br><span class="line">  https://github.com/Homebrew/brew<span class="comment">#donations</span></span><br><span class="line"></span><br><span class="line">==&gt; Next steps:</span><br><span class="line">- Run these two commands <span class="keyword">in</span> your terminal to add Homebrew to your PATH:</span><br><span class="line">    (<span class="built_in">echo</span>; <span class="built_in">echo</span> <span class="string">&#x27;eval &quot;$(/opt/homebrew/bin/brew shellenv)&quot;&#x27;</span>) &gt;&gt; /Users/liwenfei/.zprofile</span><br><span class="line">    <span class="built_in">eval</span> <span class="string">&quot;<span class="subst">$(/opt/homebrew/bin/brew shellenv)</span>&quot;</span></span><br><span class="line">- Run these commands <span class="keyword">in</span> your terminal to add the non-default Git remotes <span class="keyword">for</span> Homebrew/brew and Homebrew/homebrew-core:</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;# Set PATH, MANPATH, etc., for Homebrew.&#x27;</span> &gt;&gt; /Users/liwenfei/.zprofile</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;export HOMEBREW_BREW_GIT_REMOTE=&quot;https://mirrors.ustc.edu.cn/brew.git&quot;&#x27;</span> &gt;&gt; /Users/liwenfei/.zprofile</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;export HOMEBREW_CORE_GIT_REMOTE=&quot;https://mirrors.ustc.edu.cn/homebrew-core.git&quot;&#x27;</span> &gt;&gt; /Users/liwenfei/.zprofile</span><br><span class="line">    <span class="built_in">export</span> HOMEBREW_BREW_GIT_REMOTE=<span class="string">&quot;https://mirrors.ustc.edu.cn/brew.git&quot;</span></span><br><span class="line">    <span class="built_in">export</span> HOMEBREW_CORE_GIT_REMOTE=<span class="string">&quot;https://mirrors.ustc.edu.cn/homebrew-core.git&quot;</span></span><br><span class="line">- Run brew <span class="built_in">help</span> to get started</span><br><span class="line">- Further documentation:</span><br><span class="line">    https://docs.brew.sh</span><br></pre></td></tr></table></figure>



<p>意思应该是让我配置环境变量<br>按照指示<br>在终端依次执行下面两条命令<br>(echo; echo ‘eval “$(&#x2F;opt&#x2F;homebrew&#x2F;bin&#x2F;brew shellenv)”‘) &gt;&gt; &#x2F;Users&#x2F;liwenfei&#x2F;.zprofile<br>eval “$(&#x2F;opt&#x2F;homebrew&#x2F;bin&#x2F;brew shellenv)”<br>然后执行brew -v<br>成功打印出版本号 Homebrew 4.0.13</p>
<p>继续按照指示配置环境变量<br>echo ‘# Set PATH, MANPATH, etc., for Homebrew.’ &gt;&gt; &#x2F;Users&#x2F;liwenfei&#x2F;.zprofile<br>echo ‘export HOMEBREW_BREW_GIT_REMOTE&#x3D;”<a href="https://mirrors.ustc.edu.cn/brew.git">https://mirrors.ustc.edu.cn/brew.git</a>“‘ &gt;&gt; &#x2F;Users&#x2F;liwenfei&#x2F;.zprofile<br>echo ‘export HOMEBREW_CORE_GIT_REMOTE&#x3D;”<a href="https://mirrors.ustc.edu.cn/homebrew-core.git">https://mirrors.ustc.edu.cn/homebrew-core.git</a>“‘ &gt;&gt; &#x2F;Users&#x2F;liwenfei&#x2F;.zprofile<br>export HOMEBREW_BREW_GIT_REMOTE&#x3D;”<a href="https://mirrors.ustc.edu.cn/brew.git">https://mirrors.ustc.edu.cn/brew.git</a>“<br>export HOMEBREW_CORE_GIT_REMOTE&#x3D;”<a href="https://mirrors.ustc.edu.cn/homebrew-core.git">https://mirrors.ustc.edu.cn/homebrew-core.git</a>“</p>
<p>然后执行brew help成功打印出brew帮助信息</p>
<p>说明homebrew安装成功完成！</p>
<blockquote>
<p>参考：<br><a href="https://www.funkyspacemonkey.com/how-to-install-homebrew-on-m1-macs-running-macos-monterey">https://www.funkyspacemonkey.com/how-to-install-homebrew-on-m1-macs-running-macos-monterey</a><br><a href="https://cloud.tencent.com/developer/article/1853162">https://cloud.tencent.com/developer/article/1853162</a><br><a href="https://zhuanlan.zhihu.com/p/607620531">https://zhuanlan.zhihu.com/p/607620531</a><br><a href="https://www.jianshu.com/p/4d051b10af7e">https://www.jianshu.com/p/4d051b10af7e</a><br>科大镜像源相关<br><a href="https://mirrors.ustc.edu.cn/help/index.html#">https://mirrors.ustc.edu.cn/help/index.html#</a><br><a href="https://mirrors.ustc.edu.cn/help/brew.git.html">https://mirrors.ustc.edu.cn/help/brew.git.html</a></p>
</blockquote>
]]></content>
      <categories>
        <category>macOS</category>
      </categories>
      <tags>
        <tag>Mac</tag>
        <tag>Mac mini</tag>
        <tag>Apple Silicon</tag>
        <tag>M2</tag>
        <tag>macOS</tag>
        <tag>Homebrew</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac mini M2(macOS Ventura 13.3.1)安装Git</title>
    <url>/2023/04/18/Mac-mini-M2-macOS-Ventura-13-3-1-%E5%AE%89%E8%A3%85Git/</url>
    <content><![CDATA[<p>系列第一弹，新买了一台Mac mini M2，记录一下Java程序员的一些环境搭建过程</p>
<h3 id="1-查看当前系统Git"><a href="#1-查看当前系统Git" class="headerlink" title="1.查看当前系统Git"></a>1.查看当前系统Git</h3><p>打开终端，执行git –version命令查看git版本，检查是否安装了git以及git版本</p>
<p>但是此处报错了，主要信息为<em>xcode-select: note: No developer tools were found, requesting install.</em> 并且弹窗提示安装XCode。</p>
<p>如果按弹窗提示去安装XCode的话，需要下载好几个Gb的内容，而且我也不做苹果应用开发，所以不想安装XCode。</p>
<p>实际上，这里Git并非一定要安装XCode，而是需要一个Command Line Tools，可以去苹果开发者网站上单独下载这个Command Line Tools。</p>
<p>打开苹果开发者网站（<a href="https://developer.apple.com/download/all/%EF%BC%89%EF%BC%8C%E7%99%BB%E5%BD%95AppleID%EF%BC%8C%E7%99%BB%E5%BD%95%E5%90%8E%E7%9C%8B%E5%88%B0More">https://developer.apple.com/download/all/），登录AppleID，登录后看到More</a> Downloads里面，会有Command Line Tools，也可以直接搜索关键字‘Command’，然后点击xxx.dmg下载，下载完成后双击打开进行安装即可。</p>
<p>安装完成后，再次执行git –version命令查看git版本，成功输出git版本信息。</p>
<p>但此时的git是macOS自带的git，据说不好用，所以一般都是重新下载官网的git。</p>
<h3 id="2-安装Git"><a href="#2-安装Git" class="headerlink" title="2.安装Git"></a>2.安装Git</h3><p>通过Git官网(<a href="https://git-scm.com/download/mac)%E7%9A%84%E6%8C%87%E5%8D%97%EF%BC%8C%E6%9C%89%E4%BB%A5%E4%B8%8B%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F%E6%9D%A5%E5%AE%89%E8%A3%85Git%EF%BC%9A">https://git-scm.com/download/mac)的指南，有以下几种方式来安装Git：</a></p>
<ul>
<li><p>Homebrew<br>Install homebrew if you don’t already have it, then:<br>$ brew install git</p>
</li>
<li><p>MacPorts<br>Install MacPorts if you don’t already have it, then:<br>$ sudo port install git</p>
</li>
<li><p>Xcode<br>Apple ships a binary package of Git with Xcode.</p>
</li>
<li><p>Binary installer<br>Tim Harper provides an installer for Git. The latest version is 2.33.0, which was released over 1 year ago, on 2021-08-30.</p>
</li>
<li><p>Building from Source<br>If you prefer to build from source, you can find tarballs on kernel.org. The latest version is 2.40.0.</p>
</li>
<li><p>Installing git-gui<br>If you would like to install git-gui and gitk, git’s commit GUI and interactive history browser, you can do so using homebrew<br>$ brew install git-gui</p>
</li>
</ul>
<p>而且！网上一些推荐教程里面都是说无需卸载mac自带的git，只需安装好新的git后把环境变量配置改为指向新的git home即可，但是，我这台新的mac mini，没有<del>&#x2F;.bash_profile文件，也没有</del>&#x2F;.zshrc文件，我也不知道现在的环境变量配置在哪里了，所以我决定不安装新的git了，就用系统自带的这个吧。。。</p>
<h3 id="3-配置Git"><a href="#3-配置Git" class="headerlink" title="3.配置Git"></a>3.配置Git</h3><h4 id="3-1-基本配置"><a href="#3-1-基本配置" class="headerlink" title="3.1.基本配置"></a>3.1.基本配置</h4><p>查看Git全局配置</p>
<blockquote>
<p>git config –global –list </p>
</blockquote>
<p>设置Git用户信息</p>
<blockquote>
<p>git config –global user.name “your name”<br>git config –global user.email “your email”</p>
</blockquote>
<h4 id="3-2-配置Github"><a href="#3-2-配置Github" class="headerlink" title="3.2.配置Github"></a>3.2.配置Github</h4><h5 id="3-2-1生成ssh-key"><a href="#3-2-1生成ssh-key" class="headerlink" title="3.2.1生成ssh key"></a>3.2.1生成ssh key</h5><blockquote>
<p>ssh-keygen -t rsa -C “your email”</p>
</blockquote>
<p>在终端中执行上述命令，回车后会有三次让你输入密码的地方，直接按回车键跳过即可</p>
<p>命令执行完之后，生成的id_rsa和id_rsa.pub文件位于~&#x2F;.ssh目录</p>
<h5 id="3-2-2Github配置"><a href="#3-2-2Github配置" class="headerlink" title="3.2.2Github配置"></a>3.2.2Github配置</h5><p>a)复制id_rsa.pub文件内的所有内容</p>
<p>b)打开Github -&gt; settings -&gt; SSH and GPG Keys -&gt; New SSH key -&gt; 填写一个Title，然后在下面框里粘贴刚才复制到内容，保存即可</p>
<h5 id="3-2-3测试Github连接"><a href="#3-2-3测试Github连接" class="headerlink" title="3.2.3测试Github连接"></a>3.2.3测试Github连接</h5><p>测试命令</p>
<blockquote>
<p>ssh -T <a href="mailto:&#103;&#105;&#x74;&#x40;&#103;&#105;&#116;&#104;&#117;&#98;&#46;&#99;&#x6f;&#109;">&#103;&#105;&#x74;&#x40;&#103;&#105;&#116;&#104;&#117;&#98;&#46;&#99;&#x6f;&#109;</a></p>
</blockquote>
<p>在终端中执行该命令，只要能出现以下内容，就是说明Github连接成功</p>
<blockquote>
<p>Hi [your name]! You’ve successfully authenticated, but GitHub does not provide shell access.</p>
</blockquote>
<blockquote>
<p>可能是因为第一次执行，打印了以下内容<br>The authenticity of host ‘github.com (20.205.243.166)’ can’t be established.<br>ED25519 key fingerprint is SHA256:+DiY3wvvV6TuJJhbpZisF&#x2F;zLDA0zPMSvHdkr4UvCOqU.<br>This key is not known by any other names<br>Are you sure you want to continue connecting (yes&#x2F;no&#x2F;[fingerprint])?<br>直接输入yes<br>然后又打印出以下内容<br>Warning: Permanently added ‘github.com’ (ED25519) to the list of known hosts.<br>PTY allocation request failed on channel 0<br>Hi heart14! You’ve successfully authenticated, but GitHub does not provide shell access.<br>同时发现yes之后，在~&#x2F;.ssh目录下生成了一个known_hosts文件</p>
<p>说明已经成功配置好Github连接<br>再次执行ssh -T <a href="mailto:&#x67;&#105;&#116;&#64;&#103;&#105;&#116;&#x68;&#117;&#x62;&#x2e;&#99;&#x6f;&#109;">&#x67;&#105;&#116;&#64;&#103;&#105;&#116;&#x68;&#117;&#x62;&#x2e;&#99;&#x6f;&#109;</a>命令，已经不会再问yes不yes了</p>
</blockquote>
<blockquote>
<p>参考：<br>优雅的卸载Mac默认的Xcode附带的Git <a href="https://ld246.com/article/1399808431515">https://ld246.com/article/1399808431515</a><br>Git命令大全 <a href="https://www.runoob.com/note/56524">https://www.runoob.com/note/56524</a></p>
</blockquote>
]]></content>
      <categories>
        <category>macOS</category>
      </categories>
      <tags>
        <tag>Mac</tag>
        <tag>Mac mini</tag>
        <tag>Apple Silicon</tag>
        <tag>M2</tag>
        <tag>macOS</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2018/02/12/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>建站</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>主题</tag>
      </tags>
  </entry>
  <entry>
    <title>同事笑谈</title>
    <url>/2023/02/13/%E5%90%8C%E4%BA%8B%E7%AC%91%E8%B0%88/</url>
    <content><![CDATA[<p>今天中午吃饭时，两个大聪明同事再次让我惊掉下巴。</p>
<p>刚开始甲先说到最近那个ChatGPT很火啊，</p>
<p>我原以为大家都是搞程序的，聊到ChatGPT应该会说一些技术相关的东西吧，</p>
<p>没想到他们一张嘴又是那套外国的月亮非常圆的歪屁股发言….</p>
<p>-甲 好像这个ChatGPT开发者是个俄罗斯人，移民去美国的</p>
<p>-乙 美国好多人都是移民过去的</p>
<p>-甲 为什么都喜欢去那边呢</p>
<p>-甲 可能是美国比较开放吧，想干什么就干什么，不像国内，什么都要限制你</p>
<p>-乙 可能还是因为他们历史比较短，没什么底蕴，中国五千年历史，全是糟粕！</p>
<p>-甲 对啊，在中国你干什么那些当官的都要来插一手</p>
<p>-乙 感觉全世界只有中国会这样</p>
<p>-甲 小时候听我爸妈讨论毛主席，我感觉毛主席做了很多错事</p>
<p>-乙 做了很多错事，也做了很多对的事，我觉得wenge就是对的事，我非常支持</p>
<p>-乙 （一堆乱七八糟邪门歪理大意就是以暴制暴被批斗的都是新中国的吸血鬼应该被批斗）</p>
<p>-甲 噢噢原来是这样，那我觉得做的很对</p>
<p>每此听他们俩聊天，不管什么话题，扯不过三句话，必定收束到“外国都是好的，中国都是不好的”这一条线上</p>
<p>外国是哪个国家也不知道，反正就除了中国都是外国，外国都是好的</p>
<p>真不知道，他们是在国内遭受了怎样的迫害？</p>
<p>也不知道，他们都没出过国门，怎么对“外国”这么了解</p>
<p>当年那个这里的空气都是香甜的女生，如今不知是不是在国内过的水深火热</p>
<p>而这两位大聪明同事，连香甜的空气都没闻过，却还能依然坚定不移的吹捧</p>
<p>可能我太无知，对我的国家，对这个世界了解的太少，看不到他们眼中那个的世界真相。</p>
<p>可惜我太没文化，写不出长篇大论怼他们的话，千言万语只能汇成一句卧槽傻逼。</p>
]]></content>
      <categories>
        <category>杂记</category>
      </categories>
      <tags>
        <tag>杂记</tag>
      </tags>
  </entry>
  <entry>
    <title>打开使用高版本Java项目时报错：无效的目标发行版17</title>
    <url>/2023/02/20/%E6%89%93%E5%BC%80%E4%BD%BF%E7%94%A8%E9%AB%98%E7%89%88%E6%9C%ACJava%E9%A1%B9%E7%9B%AE%E6%97%B6%E6%8A%A5%E9%94%99%EF%BC%9A%E6%97%A0%E6%95%88%E7%9A%84%E7%9B%AE%E6%A0%87%E5%8F%91%E8%A1%8C%E7%89%8817/</url>
    <content><![CDATA[<p>不同项目使用不同jdk版本的配置。</p>
<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>1.本机安装的jdk版本为jdk1.8.0_241（已配置环境变量）</p>
<p>2.新项目A的pom.xml中配置了&lt;java.version&gt;17&lt;&#x2F;java.version&gt;属性，说明它使用的是jdk17版本</p>
<p>3.由于其它项目引入A项目依赖，所以要对A项目先进行 maven clean install</p>
<p>在点击maven install的时候报错：无效的目标发行版17</p>
<h4 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h4><p>本机安装的jdk版本与项目使用的jdk版本不一致</p>
<h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>由于需要在不更改项目java版本的情况下成功运行，所以网上一些教程里使用的“修改项目中的Java版本”并不适用我的情况</p>
<h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>本机安装的jdk版本与项目使用的jdk版本不一致，那么我需要重新下载一个jdk17并安装</p>
<p>但两个版本的jdk在同一台机器上不能同时安装生效（因为不能同时配置两个目录不相同的JAVA_HOME环境变量）</p>
<p>jdk1.8是使用msi installer方式安装的，所以jdk17选择下载压缩文件，直接进行解压安装</p>
<p>然后不要配置jdk17的环境变量，保持本机环境生效的依然是jdk1.8</p>
<p>在使用java17的项目中进行手动引入jdk并选择使用</p>
<h4 id="解决过程"><a href="#解决过程" class="headerlink" title="解决过程"></a>解决过程</h4><h5 id="下载jdk17"><a href="#下载jdk17" class="headerlink" title="下载jdk17"></a>下载jdk17</h5><p><a href="https://www.oracle.com/java/technologies/downloads/">Java Downloads | Oracle</a></p>
<p>在官方下载页面，选择windows - x64 Compressed Archive 下载压缩文件</p>
<h5 id="解压jdk17"><a href="#解压jdk17" class="headerlink" title="解压jdk17"></a>解压jdk17</h5><h5 id="手动添加jdk"><a href="#手动添加jdk" class="headerlink" title="手动添加jdk"></a>手动添加jdk</h5><p>Idea打开项目，依次选择 File - Project Structure - Platform Settings - 加号，然后在弹窗里选择刚才解压目录，点击确定</p>
<p>点击Apply</p>
<h5 id="修改项目SDK"><a href="#修改项目SDK" class="headerlink" title="修改项目SDK"></a>修改项目SDK</h5><p>在File - Project Structure - Project Settings - Project 菜单中修改SDK选项配置为刚才添加的jdk17，同时Language level选项值为SDK default</p>
<h5 id="查看其它响应配置"><a href="#查看其它响应配置" class="headerlink" title="查看其它响应配置"></a>查看其它响应配置</h5><p>上一步修改完成后，在File - Project Structure - Project Settings - Modules 里面的SDK版本应该也随之变为jdk17</p>
<h5 id="完成修改"><a href="#完成修改" class="headerlink" title="完成修改"></a>完成修改</h5><p>点击OK</p>
<h5 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h5><p>此时，再次执行maven clean install命令，可以成功执行</p>
<p>同时，cmd中查看Java -version可看到环境变量中的jdk版本依然为jdk1.8.0_241，也不会影响其它项目的jdk版本。（打开其它项目时最好看一下配置是否是自己原先的配置）</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java17</tag>
      </tags>
  </entry>
  <entry>
    <title>无问西东</title>
    <url>/2018/02/24/%E6%97%A0%E9%97%AE%E8%A5%BF%E4%B8%9C/</url>
    <content><![CDATA[<p>大概一个月前去看的《无问西东》，电影中梅贻琦校长关于“真实”一词的说法令我思索至今：<br>​“你看到什么，听到什么，做什么，和谁在一起，如果有一种从心灵深处满溢出来的，不懊悔也不羞耻的，平和与喜悦，那就是真实。”<br>​从看完电影回来，我就一直对这句话不能释怀，现在的生活真实吗？不真实！甚至充满了懊悔并无限怀念以前的校园时光，对自己现在所做的工作没有热爱没有激情，有的只是机械的重复，有的只是能换来一份薪水来使自己在这社会的洪流中得以活命。<br>​这半年多的时间里，最快乐的时候就是每次约上青山去网吧开黑的时候，耳机里传出熟悉的声音，仿佛回到了从前“并肩战斗”的时光，唯有这些错觉，能给操蛋的当下带来一丝宽慰，觉得不那么孤独。悠享飞宇城市英雄，食堂外卖鸡蛋灌饼，山南站北爱情湖畔，晚出晨归春夏秋冬。可这些过往又是在记忆里那么清晰，点点滴滴，那么孤独。<br>​下午坐上火车便开始睡觉，一觉醒来天色将歇，昏暗的车厢灰蒙蒙的窗外以及那遥远的目的地，心里想到李白一首《行路难》，停杯投箸不能食，拔剑四顾心茫然。“世界那么大，我想去看看”说的何其潇洒，现实却是欲渡黄河冰塞川，将登太行雪满山。但即便如此，我们也要向前啊，家里的父母终于盼到你长大成人，还在等着你独当一面。<br>​  悟已往之不谏，知来者之可追。<br>​  实迷途其未远，觉今是而昨非。<br>​虽不敢说今是昨非，但当你觉得你需要改变的时候，那就别再犹豫，从现在开始改变。<br>​  - 大圣此去欲何？<br>​  - 踏南天，碎凌霄！<br>​  - 若一去不回……<br>​  - 便一去不回。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>同时设置公司与个人的Git环境与Maven配置</title>
    <url>/2023/02/22/%E5%90%8C%E6%97%B6%E8%AE%BE%E7%BD%AE%E5%85%AC%E5%8F%B8%E4%B8%8E%E4%B8%AA%E4%BA%BA%E7%9A%84Git%E7%8E%AF%E5%A2%83%E4%B8%8EMaven%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="需求说明"><a href="#需求说明" class="headerlink" title="需求说明"></a>需求说明</h2><p>假如我的笔记本电脑，要在公司作为办公开发电脑，连接公司内网、内网Maven依赖仓库与内网Gitlab代码仓库，开发公司项目。同时要兼顾下班把笔记本带回家，连接阿里云Maven仓库和Github仓库，开发自己的项目。</p>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>首先电脑上需要先安装完git。</p>
<p>在公司，通过https方式，进行公司项目代码从gitlab仓库上传下载，不需要配置git。第一次clone的时候弹出输入账号密码的登录框，登录后记住密码，之后即可在公司pull push 代码了。</p>
<p>在家里，通过ssh方式，进行个人项目代码从GitHub仓库上传下载。需要配置ssh key。</p>
<p>生成shh key</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;your_email@example.com&quot;</span></span><br></pre></td></tr></table></figure>

<p>然后将生成的rsa.pub文件内容复制粘贴到github个人设置中的settings–&gt;ssh key，即可进行代码上传下载。</p>
<h4 id="git提交记录中的用户信息问题"><a href="#git提交记录中的用户信息问题" class="headerlink" title="git提交记录中的用户信息问题"></a>git提交记录中的用户信息问题</h4><p>公司gitlab账号是我的公司邮箱<a href="mailto:&#119;&#x66;&#x6c;&#x69;&#64;&#x63;&#104;&#x69;&#x6e;&#97;&#x75;&#x6d;&#x73;&#46;&#99;&#111;&#109;">&#119;&#x66;&#x6c;&#x69;&#64;&#x63;&#104;&#x69;&#x6e;&#97;&#x75;&#x6d;&#x73;&#46;&#99;&#111;&#109;</a>，GitHub是我的个人邮箱<a href="mailto:&#108;&#x77;&#x66;&#49;&#52;&#64;&#x71;&#113;&#46;&#x63;&#x6f;&#109;">&#108;&#x77;&#x66;&#49;&#52;&#64;&#x71;&#113;&#46;&#x63;&#x6f;&#109;</a>。</p>
<p>由于主要是在公司使用，所以在git通用配置上，设置用户名和邮箱为公司：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;wfli&quot;</span>  </span><br><span class="line">git config --global user.email <span class="string">&quot;wfli@chinaums.com&quot;</span></span><br></pre></td></tr></table></figure>

<p>这样在公司，什么都不用管，直接上传下载即可，代码提交记录上显示的就是公司里的个人信息了。</p>
<p>然后，在家里的时候，如果也要提交代码，GitHub上显示的提交记录，也是公司里的个人信息(<a href="mailto:&#119;&#x66;&#x6c;&#105;&#64;&#x63;&#104;&#105;&#x6e;&#x61;&#117;&#x6d;&#115;&#x2e;&#99;&#x6f;&#109;">&#119;&#x66;&#x6c;&#105;&#64;&#x63;&#104;&#105;&#x6e;&#x61;&#117;&#x6d;&#115;&#x2e;&#99;&#x6f;&#109;</a>)，这样其实也没问题，都是自己。但是如果想让它显示为GitHub的注册用户名和邮箱的话，可以在每个从GitHub下载下来的仓库目录下，单独设置user.name和email属性：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --<span class="built_in">local</span> user.name <span class="string">&quot;heart14&quot;</span>  </span><br><span class="line">git config --<span class="built_in">local</span> user.email <span class="string">&quot;lwf14@qq.com&quot;</span></span><br></pre></td></tr></table></figure>

<p>这个–local参数使得这个配置只在这个目录生效，所以不会影响公司项目的提交。</p>
<p>这样配置之后，即可实现，公司项目通过HTTPS方式，以wfli&#x2F;<a href="mailto:&#x77;&#102;&#x6c;&#x69;&#64;&#x63;&#104;&#x69;&#x6e;&#x61;&#117;&#109;&#x73;&#x2e;&#99;&#111;&#109;">&#x77;&#102;&#x6c;&#x69;&#64;&#x63;&#104;&#x69;&#x6e;&#x61;&#117;&#109;&#x73;&#x2e;&#99;&#111;&#109;</a>用户提交代码，个人项目通过SSH方式，以heart14&#x2F;<a href="mailto:&#108;&#x77;&#x66;&#49;&#52;&#x40;&#113;&#x71;&#x2e;&#x63;&#x6f;&#x6d;">&#108;&#x77;&#x66;&#49;&#52;&#x40;&#113;&#x71;&#x2e;&#x63;&#x6f;&#x6d;</a>用户提交代码。</p>
<blockquote>
<p>参考：<br><a href="https://www.cnblogs.com/yanglang/p/9563496.html">https://www.cnblogs.com/yanglang/p/9563496.html</a><br><a href="https://www.cnblogs.com/hezhi/p/10317642.html">https://www.cnblogs.com/hezhi/p/10317642.html</a></p>
</blockquote>
<h4 id="maven依赖仓库问题"><a href="#maven依赖仓库问题" class="headerlink" title="maven依赖仓库问题"></a>maven依赖仓库问题</h4><h5 id="问题说明"><a href="#问题说明" class="headerlink" title="问题说明"></a>问题说明</h5><p>还有一个情况就是，</p>
<p>在公司用的是公司搭建的私域仓库，在家用的是阿里云公共仓库。</p>
<p>在公司连不了外网，用不了阿里云仓库，在家连不上内网，用不了公司仓库。</p>
<p>难道每次都要去修改maven&#x2F;conf&#x2F;settings.xml文件吗？</p>
<p>其实也不用。可以配置一下maven&#x2F;conf&#x2F;settings.xml，使得在不同环境，不同项目，可以成功下载自己所需的依赖。</p>
<h5 id="配置方法"><a href="#配置方法" class="headerlink" title="配置方法"></a>配置方法</h5><p>在maven&#x2F;conf&#x2F;settings.xml的profile节点进行配置maven仓库镜像，这里可以配置多个仓库，他们会同时生效，也可以在Intellj idea上的maven插件上进行控制具体哪个仓库生效。</p>
<p>这里配置多个仓库后，会依次检索每个生效的仓库，如果连接失败或者没找到所需的依赖包，会去下一个生效的仓库查找。这样公司项目可以从公司maven仓库下载依赖，个人项目也可以从阿里云仓库下载依赖了。</p>
<p>而以往在mirrors里面配置，mirror相当于是对仓库的一个备份。即便配置了多个mirror，也只有在第一个仓库连接失败的时候才会进行连接下一个仓库，否则，只要连接成功，即使在仓库里没有找到依赖，也不会去下一个仓库找。这样就不能满足我们的需求了。</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Maven</tag>
        <tag>Git</tag>
        <tag>GitHub</tag>
        <tag>GitLab</tag>
      </tags>
  </entry>
  <entry>
    <title>我和猫，都很想你</title>
    <url>/2021/03/31/%E6%88%91%E5%92%8C%E7%8C%AB%EF%BC%8C%E9%83%BD%E5%BE%88%E6%83%B3%E4%BD%A0/</url>
    <content><![CDATA[<p>生日快乐<br>李嘉图两岁了</p>
<p>其实也不是今天出生<br>我不知道他哪天出生的<br>只是两年前的今天<br>仿佛愚人节的玩笑一般<br>他在我阳台外面的院子里趴了一天<br>天黑之后我就把他抱了进来</p>
<p>那就算是今天生日吧</p>
<p>李嘉图来之前<br>我一直盘算着要养一只猫<br>也不用什么高贵品种<br>救助站领养一只就可以<br>但我联系了一个领养之家<br>emmm<br>条件有点高<br>要在上海有房<br>要看我收入情况<br>要留身份证照片<br>还要定期回访检查我养的怎么样<br>对不起<br>我不配领养</p>
<p>所以李嘉图的到来<br>仿佛愚人节的赠礼一般<br>不需要任何附加条件<br>在那天昏暗的院子里<br>他看着我<br>我看着他<br>可能他跟我一样<br>在心里说了一声<br>“就你了”</p>
<p>破天荒的给他开了一个罐头<br>李嘉图极少吃这个<br>从小一直吃猫粮<br>两年来也就偶尔买过几次小鱼干<br>李嘉图抱着小鱼干<br>胸前的白围脖上掉满了鱼籽渣渣<br>不知道他心里有没有想过<br>别人家的小猫咪<br>主食零食干粮湿粮鸡肉牛肉冻干罐头<br>猫生拥有那么多美食<br>真幸福<br>不过我想<br>李嘉图应该不知道原来猫生还有这么多好吃的<br>毕竟我只给他吃猫粮<br>每天他在嘎吱嘎吱嚼着猫粮的时候<br>肯定挺幸福的吧<br>不然也不会长到这么胖</p>
<p>李嘉图真的是有点胖了<br>捡回来的时候在医院称的是450克<br>还不到一斤<br>现在已经十六斤！！！！<br>翻翻以前的照片<br>我还是从前那个少年<br>李嘉图却已经大腹便便<br>不得不感叹<br>岁月真是把杀猫刀</p>
<p>医生也说他太胖了<br>过度肥胖可能会影响寿命<br>听完我还挺淡定<br>我觉得<br>我已经决定陪他走完这一生<br>他也必定会用这一生来陪我<br>那不管是长是短<br>互相陪伴的时候<br>开心就好<br>我问李嘉图：“你开心吗？”<br>他说：“咩”</p>
<p>是的<br>李嘉图的叫声有两种<br>一种是带着颤音的“～嗯～”<br>一种是嗲嗲的“～咩～”<br>反倒是“喵呜喵呜”的经典猫叫不常有<br>每次他张开粉嫩的嘴巴<br>露出四颗尖牙中间还夹带着上下两排特别迷你特别q的门牙<br>歪着头咩咩叫的时候<br>我心都要化了<br>然后我就学他叫<br>“咩咩咩”<br>但其实我不懂他<br>他也不懂我<br>看似沟通无碍<br>实则鸡同鸭讲<br>我想终止这样的对话<br>我说“李嘉图你不要叫了”<br>他也不管我<br>继续在叫<br>“咩咩咩”</p>
<p>李嘉图名字叫李嘉图<br>是曾经很喜欢的小说《龙族》里面男主的名字<br>其实男主在小说里是个废材衰仔<br>但他有个特殊能力<br>对着濒死的一切生物喊出“不要死”<br>就能操纵生命起死回生<br>当然这只是小说<br>李嘉图刚捡回来的时候一身病灶<br>每天早上醒来<br>我都怕他撑不过昨天漫长的夜晚<br>所以给他取这个名字<br>希望能保住一命<br>只要活着<br>我一定救他</p>
<p>但这个故事听起来有点中二</p>
<p>很多人看到李嘉图时问他叫什么名字啊<br>我说他叫李嘉图<br>然后他们露出奇怪的表情<br>刚开始我还会给他们讲讲这个中二的故事<br>后来我发现他们好像就只是随口问问而已<br>对这个故事并没有很大兴趣<br>我也懒得再讲</p>
<p>-你家猫好可爱叫什么名字啊？<br>-李嘉图<br>-这么正式的名字？<br>-嗯……当儿子养的，随我姓</p>
<p>我的好大儿也算孝顺<br>特别黏我<br>我下班回来他一定在门口迎接我回家<br>我在桌边工作他就睡在桌子底下<br>我躺在床上他就窝在我的旁边<br>我去厨房他就蹲在我的脚边仰着头看我在做什么好吃的<br>我去上厕所他就疯狂扒门好像担心我会死在里面<br>……<br>这两年来<br>是李嘉图给了我无限多的温暖</p>
<p>李嘉图吃完罐头又去睡觉了<br>圆滚滚的肚子<br>宛如智障的表情<br>丝毫不管我清理毛毛时的苦痛<br>在床上睡的乱七八糟<br>猫生无忧无虑</p>
<p>真好</p>
<p>李嘉图啊<br>上次那个阿姨在电话里问你最近过得好吗<br>我说，挺好的<br>如果有一天你能再见到那个阿姨<br>能不能帮我说一句话<br>你跟她说<br>“我和李 都很想你”</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
</search>
